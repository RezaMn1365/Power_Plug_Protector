;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.04.4a Advanced
;Automatic Program Generator
;© Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :PROTECTOR
;Version :1
;Date    : 3/11/2012
;Author  : REZA MOSAVIAN
;Company : RM
;Comments:
;Chip type               : ATmega8L
;Program type            : Application
;AVR Core Clock frequency: 1.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;
;// Declare your global variables here
;unsigned short LED=0,MODE=0,MODESELECT=0;
;unsigned int OVERFLOW,AD,i,i1,X,NUM;
;
;                                                                // CODE 7SEG    V    r    L   ____M____  N    F    A  NON H    I
;unsigned short SEGCODE[21]= {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0X3E,0X31,0X38,0x33,0x27,0X37,0x71,0x77,0,0x76,0x30};

	.DSEG
;unsigned short LOCCODE[3] = {0XFE,0XEF,0XDF};                           // BA PORT D OR SHAVAD   {0XFE,0XEF,0XDF};
;        //REAL VOLTAGE 260 250 240 160 170 185
;unsigned int OUV[6] = {575,550,530,354,370,396};
;unsigned int SCALE[3] = {30,75,240};
;unsigned int OVERFLOWSCALE[3]={960,2400,7680}; //{117,293,879}
;
;#define ADC_VREF_TYPE 0x00
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 002A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002B ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 002C // Delay needed for the stabilization of the ADC input voltage
; 0000 002D delay_us(10);
;PCODE: $00000012 VOL: 0
; 0000 002E // Start the AD conversion
; 0000 002F ADCSRA|=0x40;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0030 // Wait for the AD conversion to complete
; 0000 0031 while ((ADCSRA & 0x10)==0);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0032 ADCSRA|=0x10;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0033 return ADCW;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0034 }
;PCODE: $00000020 VOL: 0
;
;
;
; void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
; 0000 0039 {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 003A /* Wait for completion of previous write */
; 0000 003B while(EECR & (1<<EEWE))
;	uiAddress -> Y+1
;	ucData -> Y+0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 003C ;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 003D /* Set up address and data registers */
; 0000 003E EEAR = uiAddress;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 003F EEDR = ucData;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0040 /* Write logical one to EEMWE */
; 0000 0041 EECR |= (1<<EEMWE);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0042 /* Start eeprom write by setting EEWE */
; 0000 0043 EECR |= (1<<EEWE);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0044 return;}
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;
;
;unsigned char EEPROM_read(unsigned int uiAddress)
; 0000 0048 {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0049 /* Wait for completion of previous write */
; 0000 004A while(EECR & (1<<EEWE))
;	uiAddress -> Y+0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 004B ;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 004C /* Set up address register */
; 0000 004D EEAR = uiAddress;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 004E /* Start eeprom read by writing EERE */
; 0000 004F EECR |= (1<<EERE);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0050 /* Return data from data register */
; 0000 0051 return EEDR;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0052 }
;PCODE: $00000043 VOL: 0
;
;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0058 {
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0059 delay_ms(40);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 005A if(PIND.2==1){goto RET20;}
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 005B SELECT0:
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 005C MODE++;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 005D MODESELECT=0XFF;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 005E if (MODE>=4) {MODE=0;goto SELECT0;};
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 005F RET20:
;PCODE: $0000005B VOL: 0
; 0000 0060 EEPROM_write(0,MODE);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0061 return;}
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)               //led(time) selector subroutin
; 0000 0065 {
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0066 delay_ms(40);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0067 if(PIND.3==1){goto RET;}
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0068 REAPEAT:
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0069 if (MODESELECT==0XFF) {MODESELECT=0;goto RET;};
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 006A PORTC.1=1;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 006B PORTC.2=1;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 006C PORTC.3=1;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 006D LED++;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 006E if (LED==1){PORTC.1=0;goto RET;};
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 006F if (LED==2){PORTC.2=0;goto RET;};
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0070 if (LED==3){PORTC.3=0;goto RET;};
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0071 if (LED==4){LED=0;goto REAPEAT;};
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0072 RET:
;PCODE: $00000098 VOL: 0
; 0000 0073 EEPROM_write(1,LED);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0074 return;}
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0077 {
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0078 TCCR0=0x00;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0079 TCNT0=0x06;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 007A OVERFLOW++;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 007B TCCR0=0x05;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 007C return;}
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;
;
;void T0N(void){       //timer0 on subroutin
; 0000 007F void T0N(void){
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0080   OVERFLOW=0;
;PCODE: $000000B0 VOL: 0
; 0000 0081   TCCR0=0x05;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0082   TCNT0=0x06;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0083   return;}
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;
;void T0F(void){       //timer0 off subroutin
; 0000 0085 void T0F(void){
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0086   TCCR0=0x00;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0087   TCNT0=0x06;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0088   return;}
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;
;
;
;void display(unsigned int DATA,unsigned int LOC){  // VOLTAGE DISPLAY SUBROUTIN
; 0000 008C void display(unsigned int DATA,unsigned int LOC){
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 008D   // PORTD=PIND | 0X31 ;                            //RESET ADDRESS | 0X31       & 0XCE
; 0000 008E   // PORTB=0XFF;                                    //RESET DATA
; 0000 008F 
; 0000 0090    switch(LOC){
;	DATA -> Y+2
;	LOC -> Y+0
;PCODE: $000000C1 VOL: 0
; 0000 0091 
; 0000 0092    case 0:{
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0093    PORTD.5=1;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0094    PORTD.4=1;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0095    PORTD.0=0;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0096    break; }
;PCODE: $000000CA VOL: 0
; 0000 0097 
; 0000 0098    case 1:{
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0099    PORTD.5=1;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 009A    PORTD.0=1;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 009B    PORTD.4=0;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 009C    break; }
;PCODE: $000000D4 VOL: 0
; 0000 009D 
; 0000 009E    case 2:{
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 009F    PORTD.0=1;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00A0    PORTD.4=1;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00A1    PORTD.5=0;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00A2    break; }
;PCODE: $000000DE VOL: 0
; 0000 00A3 
; 0000 00A4    default:{
;PCODE: $000000DF VOL: 0
; 0000 00A5    PORTD.0=1;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00A6    PORTD.4=1;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00A7    PORTD.5=1;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00A8    break; }
;PCODE: $000000E6 VOL: 0
; 0000 00A9  }
;PCODE: $000000E7 VOL: 0
; 0000 00AA 
; 0000 00AB    //PORTD=PIND & LOCCODE[LOC];                     //FIRST  LOCATION appointment   & LOCCODE[LOC]  | LOCCODE[LOC]
; 0000 00AC    PORTB=~SEGCODE[DATA];                          //NEXT SEND DATA
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00AD    return;}
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;
;void numproduction(){           //digit preparation subroutin
; 0000 00AF void numproduction(){
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00B0 
; 0000 00B1    X=NUM/100;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00B2    display(X,2);                //CALL VOLTAGE SUBROUTIN WITH DATA AND LOCATION CODE AS INPUT
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00B3 
; 0000 00B4    X=(NUM/10)%10;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00B5    display(X,1);               //CALLVOLTAGE SUBROUTIN WITH DATA AND LOCATION CODE AS INPUT
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00B6 
; 0000 00B7    X=NUM%10;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00B8    display(X,0);              //CALL VOLTAGE SUBROUTIN WITH DATA AND LOCATION CODE AS INPUT
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00B9     return;}
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;
; void ADD(){
; 0000 00BB void ADD(){
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00BC  for (i=0;i<=63;i++){
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00BD    AD+=read_adc(0);
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00BE    numproduction();}
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00BF    AD=AD/64;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00C0    NUM=(AD*10)/22;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00C1    return;}
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;
;void main(void){
; 0000 00C3 void main(void){
;PCODE: $0000013B VOL: 0
; 0000 00C4 // Declare your local variables here
; 0000 00C5 
; 0000 00C6 // Input/Output Ports initialization
; 0000 00C7 // Port B initialization
; 0000 00C8 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 00C9 // State7=1 State6=1 State5=1 State4=1 State3=1 State2=1 State1=1 State0=1
; 0000 00CA PORTB=0xFF;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00CB DDRB=0xFF;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00CC 
; 0000 00CD // Port C initialization
; 0000 00CE // Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=In
; 0000 00CF // State6=1 State5=1 State4=1 State3=1 State2=1 State1=1 State0=T
; 0000 00D0 PORTC=0x7E;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00D1 DDRC=0x7E;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00D2 
; 0000 00D3 // Port D initialization
; 0000 00D4 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=In Func1=Out Func0=Out
; 0000 00D5 // State7=1 State6=1 State5=1 State4=1 State3=T State2=T State1=0 State0=1
; 0000 00D6 PORTD=0xF1;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00D7 DDRD=0xF3;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00D8 
; 0000 00D9 // Timer/Counter 0 initialization
; 0000 00DA // Clock source: System Clock
; 0000 00DB // Clock value: 0.977 kHz
; 0000 00DC TCCR0=0x00;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00DD TCNT0=0x00;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00DE 
; 0000 00DF // Timer/Counter 1 initialization
; 0000 00E0 // Clock source: System Clock
; 0000 00E1 // Clock value: Timer1 Stopped
; 0000 00E2 // Mode: Normal top=FFFFh
; 0000 00E3 // OC1A output: Discon.
; 0000 00E4 // OC1B output: Discon.
; 0000 00E5 // Noise Canceler: Off
; 0000 00E6 // Input Capture on Falling Edge
; 0000 00E7 // Timer1 Overflow Interrupt: Off
; 0000 00E8 // Input Capture Interrupt: Off
; 0000 00E9 // Compare A Match Interrupt: Off
; 0000 00EA // Compare B Match Interrupt: Off
; 0000 00EB TCCR1A=0x00;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00EC TCCR1B=0x00;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00ED TCNT1H=0x00;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00EE TCNT1L=0x00;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00EF ICR1H=0x00;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00F0 ICR1L=0x00;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00F1 OCR1AH=0x00;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 00F2 OCR1AL=0x00;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00F3 OCR1BH=0x00;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00F4 OCR1BL=0x00;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00F5 
; 0000 00F6 // Timer/Counter 2 initialization
; 0000 00F7 // Clock source: System Clock
; 0000 00F8 // Clock value: Timer2 Stopped
; 0000 00F9 // Mode: Normal top=FFh
; 0000 00FA // OC2 output: Disconnected
; 0000 00FB ASSR=0x00;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 00FC TCCR2=0x00;
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 00FD TCNT2=0x00;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 00FE OCR2=0x00;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 00FF 
; 0000 0100 // External Interrupt(s) initialization
; 0000 0101 // INT0: On
; 0000 0102 // INT0 Mode: Falling Edge
; 0000 0103 // INT1: On
; 0000 0104 // INT1 Mode: Falling Edge
; 0000 0105 GICR|=0xC0;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 0106 MCUCR=0x0A;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0107 GIFR=0xC0;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0108 
; 0000 0109 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 010A TIMSK=0x01;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 010B 
; 0000 010C // Analog Comparator initialization
; 0000 010D // Analog Comparator: Off
; 0000 010E // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 010F ACSR=0x80;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0110 SFIOR=0x00;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 0111 
; 0000 0112 // ADC initialization
; 0000 0113 // ADC Clock frequency: 500.000 kHz
; 0000 0114 // ADC Voltage Reference: AREF pin
; 0000 0115 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 0116 ADCSRA=0x89;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 0117 
; 0000 0118 
; 0000 0119 
; 0000 011A // Global enable interrupts
; 0000 011B #asm("sei")
;PCODE: $00000179 VOL: 0
	sei
;PCODE: $0000017A VOL: 0
; 0000 011C //while(1){
; 0000 011D   GICR&=0x3F;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 011E   MODE=EEPROM_read(0);
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 011F   LED=EEPROM_read(1);
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0120   if (LED==1){PORTC.1=0;goto FIRST;};
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 0121   if (LED==2){PORTC.2=0;goto FIRST;};
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0122   if (LED==3){PORTC.3=0;goto FIRST;};
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 0123   FIRST:
;PCODE: $0000019D VOL: 0
; 0000 0124   PORTD.1=0;          //relay off
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0125 
; 0000 0126   for(i=0;i<=18000;i++){
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 0127   display(18,2);         //NON on 7seg
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 0128   }
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 0129 
; 0000 012A   for(i1=0;i1<=1;i1++){
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 012B 
; 0000 012C   for(i=0;i<=18000;i++){
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 012D   display(16,0);          // F on seg
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 012E   }
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 012F 
; 0000 0130   for(i=0;i<=18000;i++){
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 0131   display(16,1);           //F on 7seg
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 0132   display(17,0);         //A on 7seg
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 0133   }
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 0134 
; 0000 0135   for(i=0;i<=18000;i++){
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 0136   display(16,2);           //F on 7seg
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 0137   display(17,1);         //A on 7seg
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 0138   display(11,0);}         //R on 7seg
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 0139 
; 0000 013A   for(i=0;i<=18000;i++){
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 013B   display(17,2);           //A on 7seg
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 013C   display(11,1);         //R on 7seg
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 013D   display(17,0);}         //A on 7seg
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 013E 
; 0000 013F   for(i=0;i<=18000;i++){
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 0140   display(11,2);          //R on seg
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 0141   display(17,1);         //A on 7seg
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 0142   }
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 0143 
; 0000 0144   for(i=0;i<=18000;i++){
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 0145   display(17,2);         //A on 7seg
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 0146   }
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 0147 
; 0000 0148   for(i=0;i<=18000;i++){
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0000 0149   display(18,2);         //NON on 7seg
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 014A   } }
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0000 014B 
; 0000 014C   T0N();
;PCODE: $00000288 VOL: 0
; 0000 014D   TIR00:
;PCODE: $00000289 VOL: 0
; 0000 014E   NUM=SCALE[LED-1]-(OVERFLOW/32);         //TIMER VALUE initialize
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0000 014F   numproduction();                       // timer display
;PCODE: $00000296 VOL: 0
; 0000 0150   if(OVERFLOW>=OVERFLOWSCALE[LED-1]){T0F();GICR|=0xC0;goto start;}            //TIMER0 overflow cheker
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 0151   goto TIR00;
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 0152 
; 0000 0153 
; 0000 0154 
; 0000 0155 
; 0000 0156 
; 0000 0157  start:
;PCODE: $000002A6 VOL: 0
; 0000 0158 
; 0000 0159 
; 0000 015A 
; 0000 015B  if (MODESELECT==0XFF) {goto SELECT1;};
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 015C  ADD();
;PCODE: $000002AC VOL: 0
; 0000 015D  if (AD > OUV[MODE-1]&& MODESELECT==0) {PORTD.1=0;PORTC.4=1;GICR&=0x3F;T0N();goto OVER;}    //over voltage checker
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 015E  if (AD <= OUV[MODE+2]&& MODESELECT==0) {PORTD.1=0;PORTC.4=1;GICR&=0x3F;T0N();goto LOW;}    //under voltage checker
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
; 0000 015F  PORTD.1=1;                                                //relay on
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0000 0160   PORTC.4=0;                                               //pwr led on
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 0161  for(i=0;i<=3500;i++){                                     //  display voltage for 3500 cycle
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0000 0162  numproduction();}
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0000 0163  goto start;
;PCODE: $000002F3 VOL: 0
; 0000 0164 
; 0000 0165 
; 0000 0166   OVER:
;PCODE: $000002F4 VOL: 0
; 0000 0167   for(i=0;i<=17000;i++){                                   // HI display loop
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0000 0168   if(OVERFLOW>=760){PORTC.5=1;T0F();goto ED;};             //check buzzer on off timer
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
; 0000 0169   PORTC.5=0;                                               //buzzer on
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
; 0000 016A   ED:
;PCODE: $0000030A VOL: 0
; 0000 016B   display(18,2);                                          //non on 7seg
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
; 0000 016C   display(19,1);                                          //H on 7seg
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0000 016D   display(20,0);}                                         //I on 7seg
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
; 0000 016E   PORTC.5=1;                                              //buzzer off
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0000 016F   ADD();                                                  // read voltage
;PCODE: $00000323 VOL: 0
; 0000 0170   for(i=0;i<=3000;i++){                                   //  display voltage for 3500 cycle
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
; 0000 0171   numproduction();}
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
; 0000 0172   if (AD > (OUV[MODE-1])-10) {goto OVER;}                 //over voltage checker
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
; 0000 0173   T0N();                                                  //timer0 on
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 0174 
; 0000 0175   TIR0:                                                   // return to normal mode timer loop
;PCODE: $00000343 VOL: 0
; 0000 0176   if (AD > (OUV[MODE-1])-10) {goto OVER;}                 //over voltage checker
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
; 0000 0177   NUM=SCALE[LED-1]-(OVERFLOW/32);                         //TIMER VALUE initialize
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 0178   numproduction();                                        // timer display
;PCODE: $0000035B VOL: 0
; 0000 0179   if(OVERFLOW>=OVERFLOWSCALE[LED-1]){T0F();GICR|=0xC0;delay_ms(100);goto start;}          //TIMER0 overflow cheker
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
; 0000 017A   if(OVERFLOW>=(OVERFLOWSCALE[LED-1])-50){ADD();goto TIR0;}                                //checck voltage
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
; 0000 017B   goto TIR0;
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
; 0000 017C 
; 0000 017D   LOW:
;PCODE: $0000037A VOL: 0
; 0000 017E   for(i=0;i<=17000;i++){                                     // LOV display loop
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
; 0000 017F   if(OVERFLOW>=760){PORTC.5=1;T0F();goto ED1;};              //check buzzer on off time
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
; 0000 0180   PORTC.5=0;                                                 //buzzer on
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
; 0000 0181   ED1:
;PCODE: $00000390 VOL: 0
; 0000 0182   display(12,2);                                            //L on 7seg
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
; 0000 0183   display(0,1);                                             //O on 7seg
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
; 0000 0184   display(10,0);}                                           //V on 7seg
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
; 0000 0185   PORTC.5=1;                                                //buzzer off
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
; 0000 0186   ADD();                                                    // read voltage
;PCODE: $000003A9 VOL: 0
; 0000 0187   for(i=0;i<=3000;i++){                                     //  display voltage for 3500 cycle
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
; 0000 0188   numproduction();}
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
; 0000 0189   if (AD <= (OUV[MODE+2])+10) {goto LOW;}                   //under voltage checker
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
; 0000 018A 
; 0000 018B   T0N();                                                    //timer0 on
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
; 0000 018C   TIR1:                                                     // return to normal mode timer loop
;PCODE: $000003C8 VOL: 0
; 0000 018D   if (AD <= (OUV[MODE+2])+10) {goto LOW;}                   //undervoltage checker
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
; 0000 018E   NUM=SCALE[LED-1]-(OVERFLOW/32);                           //TIMER VALUE initialize
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
; 0000 018F   numproduction();                                          // timer display
;PCODE: $000003DF VOL: 0
; 0000 0190   if(OVERFLOW>=OVERFLOWSCALE[LED-1]){T0F();GICR|=0xC0;delay_ms(100);goto start;}       //TIMER0 overflow cheker
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
; 0000 0191   if(OVERFLOW>=(OVERFLOWSCALE[LED-1])-50){ADD();goto TIR1;}                            //checck voltage
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
; 0000 0192   goto TIR1;
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
; 0000 0193 
; 0000 0194   SELECT1:
;PCODE: $000003FE VOL: 0
; 0000 0195   if (MODESELECT==0) {goto start;};
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
; 0000 0196   display(13,2);
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
; 0000 0197   display(14,1);
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
; 0000 0198   display(MODE,0);
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
; 0000 0199   goto SELECT1;
;PCODE: $00000411 VOL: 0
; 0000 019A  }
;PCODE: $00000412 VOL: 0
